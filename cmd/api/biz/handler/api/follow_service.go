// Code generated by hertz generator.

package api

import (
	"context"
	"log"
	"net/http"
	"strconv"
	"tiktok/cmd/api/biz/pack"
	"tiktok/cmd/api/biz/rpc"
	"tiktok/kitex_gen/follow"
	"tiktok/pkg/utils"

	"github.com/pkg/errors"

	api "tiktok/cmd/api/biz/model/api"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Action .
// @router /relation/action [POST]
func Action(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	claim, err := utils.ParseToken(string(c.GetHeader("access_token")))
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.ActionResp)
	_, err = rpc.FollowAction(ctx, &follow.ActionReq{
		ToUid:      req.ToUID,
		ActionType: req.ActionType,
		Uid:        strconv.FormatInt(claim.Uid, 10),
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.action failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	c.JSON(consts.StatusOK, resp)
}

// ListFollowing .
// @router /following/list [GET]
func ListFollowing(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListFollowingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.ListFollowingResp)
	listFollowingResp, err := rpc.FollowingList(ctx, &follow.ListFollowingReq{
		Uid:      req.UID,
		PageNum:  req.PageNum,
		PageSize: req.PageSize,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.list following failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Data = &api.UserInfoData{
		Items: pack.BuildFollows(listFollowingResp.Data.Items),
		Total: listFollowingResp.Data.Total,
	}
	//resp.Data.Items =
	//resp.Data.Total =
	c.JSON(consts.StatusOK, resp)
}

// ListFollower .
// @router /follower/list [GET]
func ListFollower(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListFollowerReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.ListFollowerResp)
	listFollowerResp, err := rpc.FollowerList(ctx, &follow.ListFollowerReq{
		Uid:      req.UID,
		PageNum:  req.PageNum,
		PageSize: req.PageSize,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.list follower failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Data = &api.UserInfoData{
		Items: pack.BuildFollows(listFollowerResp.Data.Items),
		Total: listFollowerResp.Data.Total,
	}
	//resp.Data.Items = pack.BuildFollows(listFollowerResp.Data.Items)
	//resp.Data.Total = listFollowerResp.Data.Total
	c.JSON(consts.StatusOK, resp)
}

// ListFriend .
// @router /friends/list [GET]
func ListFriend(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListFriendReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	claim, err := utils.ParseToken(string(c.GetHeader("access_token")))
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.ListFriendResp)
	listFriendResp, err := rpc.FriendList(ctx, &follow.ListFriendReq{
		PageNum:  req.PageNum,
		PageSize: req.PageSize,
		Uid:      strconv.FormatInt(claim.Uid, 10),
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.list friend failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Data = &api.UserInfoData{
		Items: pack.BuildFollows(listFriendResp.Data.Items),
		Total: listFriendResp.Data.Total,
	}
	//resp.Data.Items = pack.BuildFollows(listFriendResp.Data.Items)
	//resp.Data.Total = listFriendResp.Data.Total

	c.JSON(consts.StatusOK, resp)
}

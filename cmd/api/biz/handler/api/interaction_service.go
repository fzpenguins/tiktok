// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/pkg/errors"
	"log"
	"net/http"
	"strconv"
	"tiktok/cmd/api/biz/pack"
	"tiktok/cmd/api/biz/rpc"
	"tiktok/kitex_gen/interaction"
	"tiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "tiktok/cmd/api/biz/model/api"
)

// ActionLike .
// @router /like/action [POST]
func ActionLike(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ActionLikeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	claim, err := utils.ParseToken(string(c.GetHeader("access_token")))
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.ActionLikeResp)
	_, err = rpc.LikeAction(ctx, &interaction.ActionLikeReq{
		Vid:        req.Vid,
		Cid:        req.Cid,
		ActionType: req.ActionType,
		Uid:        strconv.FormatInt(claim.Uid, 10),
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.action like failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	c.JSON(consts.StatusOK, resp)
}

// ListLike .
// @router /like/list [GET]
func ListLike(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListLikeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.ListLikeResp)
	listLikeResp, err := rpc.LikeList(ctx, &interaction.ListLikeReq{
		Uid:      req.UID,
		PageSize: req.PageSize,
		PageNum:  req.PageNum,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.list like failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Data = &api.VideosData{Items: pack.BuildVideos(listLikeResp.Data.Items)}

	c.JSON(consts.StatusOK, resp)
}

// PublishComment .
// @router /comment/publish [POST]
func PublishComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	claim, err := utils.ParseToken(string(c.GetHeader("access_token")))
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.PublishCommentResp)
	_, err = rpc.CommentAction(ctx, &interaction.PublishCommentReq{
		Vid:     req.Vid,
		Cid:     req.Cid,
		Content: req.Content,
		Uid:     strconv.FormatInt(claim.Uid, 10),
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.publish comment failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	c.JSON(consts.StatusOK, resp)
}

// ListComment .
// @router /comment/list [GET]
func ListComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.ListCommentResp)
	listCommentResp, err := rpc.CommentList(ctx, &interaction.ListCommentReq{
		Vid:      req.Vid,
		Cid:      req.Cid,
		PageSize: req.GetPageSize(),
		PageNum:  req.GetPageNum(),
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.list comment failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Items = &api.CommentsData{Items: pack.BuildComments(listCommentResp.Items.Items)}

	c.JSON(consts.StatusOK, resp)
}

// Delete .
// @router /comment/delete [DELETE]
func Delete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	claim, err := utils.ParseToken(string(c.GetHeader("access_token")))
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.DeleteResp)
	_, err = rpc.DeleteComment(ctx, &interaction.DeleteReq{
		Vid: req.Vid,
		Cid: req.Cid,
		Uid: strconv.FormatInt(claim.Uid, 10),
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.delete failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	c.JSON(consts.StatusOK, resp)
}

// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/pkg/errors"
	"log"
	"net/http"
	api "tiktok/cmd/api/biz/model/api"
	"tiktok/cmd/api/biz/pack"
	"tiktok/cmd/api/biz/rpc"
	"tiktok/kitex_gen/picture"
	"tiktok/kitex_gen/user"
	"tiktok/pkg/utils"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.RegisterResp)
	err = rpc.Register(ctx, &user.RegisterReq{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.Register failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.LoginResp)
	loginResp, err := rpc.Login(ctx, &user.LoginReq{
		Username: req.Username,
		Password: req.Password,
		Code:     req.Code,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.Login failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Data = pack.BuildUser(loginResp.Data)

	resp.Tokens = &api.Tokens{
		RefreshToken: loginResp.Tokens.RefreshToken,
		AccessToken:  loginResp.Tokens.AccessToken,
	}

	c.JSON(consts.StatusOK, resp)
}

// Info .
// @router /user/info [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.InfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.InfoResp)
	infoResp, err := rpc.SearchInfo(ctx, &user.InfoReq{Uid: req.UID})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.Info failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}
	resp.Base = pack.GoodResponse()
	resp.Data = pack.BuildUser(infoResp.Data)
	c.JSON(consts.StatusOK, resp)
}

// Upload .
// @router /user/avatar/upload [PUT]
func Upload(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UploadAvatarUrlReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}
	log.Println(c.GetHeader("access_token"))
	claim, err := utils.ParseToken(string(c.GetHeader("access_token")))
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}
	log.Println("claim:", claim)

	//userInfo, err := pack.GetUserInfo(ctx)
	//log.Println("userinfo:", userInfo)

	resp := new(api.UploadAvatarUrlResp)
	uploadResp, err := rpc.UploadAvatar(ctx, &user.UploadAvatarUrlReq{
		AvatarUrl: req.AvatarURL,
		Uid:       claim.Uid,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.upload failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Data = pack.BuildUser(uploadResp.Data)
	resp.Base = pack.GoodResponse()

	c.JSON(consts.StatusOK, resp)
}

// GetMFA .
// @router /auth/mfa/qrcode [GET]
func GetMFA(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetMFAReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	claim, err := utils.ParseToken(string(c.GetHeader("access_token")))
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.GetMFAResp)
	mfaResp, err := rpc.GetMFAqrcode(ctx, &user.GetMFAReq{Uid: claim.Uid})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.getMFA failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Data = &api.QRCode{
		Secret: mfaResp.Data.Secret,
		Qrcode: mfaResp.Data.Qrcode,
	}

	c.JSON(consts.StatusOK, resp)
}

// BindMFA .
// @router /auth/mfa/bind [POST]
func BindMFA(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.BindMFAReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.BindMFAResp)
	_, err = rpc.MFABind(ctx, &user.BindMFAReq{Secret: req.Secret, Code: req.Code})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.bindMFA failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	c.JSON(consts.StatusOK, resp)
}

// Insert .
// @router /user/image/insert [POST]
func Insert(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.InsertRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.InsertResponse)
	imageResp, err := rpc.InsertImage(ctx, &picture.InsertRequest{req.URL})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.insert failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Image = pack.BuildPicture(imageResp.Image)
	//resp.Image = &api.Image{
	//	Pid: imageResp.Image.Pid,
	//	URL: imageResp.Image.Url,
	//}

	c.JSON(consts.StatusOK, resp)
}

// SearchByImage .
// @router /user/image/search [POST]
func SearchByImage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SearchByImageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.SearchResponse)
	imagesResp, err := rpc.SearchImage(ctx, &picture.SearchByImageRequest{req.URL})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.insert failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()


	c.JSON(consts.StatusOK, &api.SearchGoodResp{
		Base:   pack.GoodResponse(),
		Images: pack.BuildPictures(imagesResp.Images),
	})
}

// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/pkg/errors"
	"log"
	"net/http"
	"tiktok/cmd/api/biz/pack"
	"tiktok/cmd/api/biz/rpc"
	"tiktok/kitex_gen/video"
	"tiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "tiktok/cmd/api/biz/model/api"
)

// Feed .
// @router /video/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.FeedResp)
	feedResp, err := rpc.Feed(ctx, &video.FeedReq{Time: req.Time})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.Feed failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Items = pack.BuildVideos(feedResp.Items)
	c.JSON(consts.StatusOK, resp)
}

// Publish .
// @router /video/publish [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	claim, err := utils.ParseToken(string(c.GetHeader("access_token")))
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.PublishResp)

	_, err = rpc.UploadVideo(ctx, &video.PublishReq{
		Data: &video.File{
			VideoUrl: req.Data.VideoURL,
			CoverUrl: req.Data.CoverURL,
		},
		Title:       req.Title,
		Description: req.Description,
		Uid:         claim.Uid,
	})

	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.publish failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()

	c.JSON(consts.StatusOK, resp)
}

// List .
// @router /video/list [GET]
func List(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.ListResp)
	listResp, err := rpc.PublishList(ctx, &video.ListReq{
		Uid:      req.UID,
		PageNum:  req.PageNum,
		PageSize: req.PageSize,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.list failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Items = &api.Datas{
		Items: pack.BuildVideos(listResp.Items.Items),
		Total: listResp.Items.Total,
	}

	c.JSON(consts.StatusOK, resp)
}

// Popular .
// @router /video/popular [GET]
func Popular(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PopularReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.PopularResp)
	popularResp, err := rpc.PopularRankList(ctx, &video.PopularReq{
		PageSize: req.PageSize,
		PageNum:  req.PageNum,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.popular failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Data = &api.Data{Items: pack.BuildVideos(popularResp.Data.Items)}

	c.JSON(consts.StatusOK, resp)
}

// Search .
// @router /video/search [POST]
func Search(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SearchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp := new(api.SearchResp)

	searchResp, err := rpc.SearchVideo(ctx, &video.SearchReq{
		Keywords: req.Keywords,
		PageSize: req.PageSize,
		PageNum:  req.PageNum,
		FromDate: req.FromDate,
		ToDate:   req.ToDate,
		Username: req.Username,
	})
	if err != nil {
		utils.Logrus.Error(err)
		log.Println("handler.search failed, original error:", errors.Cause(err))
		log.Println("stack trace: ", err)
		c.JSON(http.StatusOK, pack.BadResp())
		return
	}

	resp.Base = pack.GoodResponse()
	resp.Items = &api.Datas{
		Items: pack.BuildVideos(searchResp.Items.Items),
		Total: searchResp.Items.Total,
	}
	//resp.Items.Items = pack.BuildVideos(searchResp.Items.Items)
	//resp.Items.Total = searchResp.Items.Total

	c.JSON(consts.StatusOK, resp)
}

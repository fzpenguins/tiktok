// Code generated by hertz generator.

package main

import (
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/kitex/pkg/klog"
	prometheus "github.com/hertz-contrib/monitor-prometheus"
	"github.com/hertz-contrib/pprof"

	"log"
	"tiktok/cmd/api/biz/middleware"
	"tiktok/cmd/api/biz/rpc"
	"tiktok/cmd/api/biz/ws"
	"tiktok/cmd/api/dal"
	"tiktok/config"
	"tiktok/pkg/constants"
	"tiktok/pkg/tracer"
	"tiktok/pkg/utils"

	hertztracer "github.com/hertz-contrib/tracer/hertz"
)

func Init() {
	config.ReadConfig()
	dal.Init()

	rpc.Init()
	utils.InitLogrus()
	utils.Init()
	log.Println("successfully running...")
	klog.SetLevel(klog.LevelDebug)

}

func main() {
	Init()
	tracer, hz := tracer.InitJaegerInHertz(constants.APIServiceName)
	defer hz.Close()
	go ws.MessageHandler()
	h := server.Default(
		server.WithHostPorts("0.0.0.0:10001"),
		server.WithMaxRequestBodySize(419430400),
		server.WithTracer(prometheus.NewServerTracer(":9091", "/hertz",
			prometheus.WithEnableGoCollector(true))),
		server.WithTracer(hertztracer.NewTracer(tracer, func(c *app.RequestContext) string { return "api.hertz.server" + "::" + c.FullPath() })),
	)

	h.Use(middleware.PrometheusMiddleware())
	h.Use(hertztracer.ServerCtx())
	h.StaticFS("/data", &app.FS{
		Root: "usr/local",
	})
	pprof.Register(h)
	register(h)
	h.Spin()
}

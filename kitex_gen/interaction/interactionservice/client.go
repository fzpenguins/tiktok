// Code generated by Kitex v0.9.1. DO NOT EDIT.

package interactionservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	interaction "tiktok/kitex_gen/interaction"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ActionLike(ctx context.Context, req *interaction.ActionLikeReq, callOptions ...callopt.Option) (r *interaction.ActionLikeResp, err error)
	ListLike(ctx context.Context, req *interaction.ListLikeReq, callOptions ...callopt.Option) (r *interaction.ListLikeResp, err error)
	PublishComment(ctx context.Context, req *interaction.PublishCommentReq, callOptions ...callopt.Option) (r *interaction.PublishCommentResp, err error)
	ListComment(ctx context.Context, req *interaction.ListCommentReq, callOptions ...callopt.Option) (r *interaction.ListCommentResp, err error)
	Delete(ctx context.Context, req *interaction.DeleteReq, callOptions ...callopt.Option) (r *interaction.DeleteResp, err error)
	GetVideoInfo(ctx context.Context, req *interaction.GetVideoInfoRequest, callOptions ...callopt.Option) (r *interaction.GetVideoInfoResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kInteractionServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kInteractionServiceClient struct {
	*kClient
}

func (p *kInteractionServiceClient) ActionLike(ctx context.Context, req *interaction.ActionLikeReq, callOptions ...callopt.Option) (r *interaction.ActionLikeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ActionLike(ctx, req)
}

func (p *kInteractionServiceClient) ListLike(ctx context.Context, req *interaction.ListLikeReq, callOptions ...callopt.Option) (r *interaction.ListLikeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListLike(ctx, req)
}

func (p *kInteractionServiceClient) PublishComment(ctx context.Context, req *interaction.PublishCommentReq, callOptions ...callopt.Option) (r *interaction.PublishCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishComment(ctx, req)
}

func (p *kInteractionServiceClient) ListComment(ctx context.Context, req *interaction.ListCommentReq, callOptions ...callopt.Option) (r *interaction.ListCommentResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListComment(ctx, req)
}

func (p *kInteractionServiceClient) Delete(ctx context.Context, req *interaction.DeleteReq, callOptions ...callopt.Option) (r *interaction.DeleteResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Delete(ctx, req)
}

func (p *kInteractionServiceClient) GetVideoInfo(ctx context.Context, req *interaction.GetVideoInfoRequest, callOptions ...callopt.Option) (r *interaction.GetVideoInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoInfo(ctx, req)
}

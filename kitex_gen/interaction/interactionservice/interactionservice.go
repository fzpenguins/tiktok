// Code generated by Kitex v0.9.1. DO NOT EDIT.

package interactionservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interaction "tiktok/kitex_gen/interaction"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ActionLike": kitex.NewMethodInfo(
		actionLikeHandler,
		newInteractionServiceActionLikeArgs,
		newInteractionServiceActionLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListLike": kitex.NewMethodInfo(
		listLikeHandler,
		newInteractionServiceListLikeArgs,
		newInteractionServiceListLikeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PublishComment": kitex.NewMethodInfo(
		publishCommentHandler,
		newInteractionServicePublishCommentArgs,
		newInteractionServicePublishCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListComment": kitex.NewMethodInfo(
		listCommentHandler,
		newInteractionServiceListCommentArgs,
		newInteractionServiceListCommentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Delete": kitex.NewMethodInfo(
		deleteHandler,
		newInteractionServiceDeleteArgs,
		newInteractionServiceDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoInfo": kitex.NewMethodInfo(
		getVideoInfoHandler,
		newInteractionServiceGetVideoInfoArgs,
		newInteractionServiceGetVideoInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactionServiceServiceInfo                = NewServiceInfo()
	interactionServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactionServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactionServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func actionLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceActionLikeArgs)
	realResult := result.(*interaction.InteractionServiceActionLikeResult)
	success, err := handler.(interaction.InteractionService).ActionLike(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceActionLikeArgs() interface{} {
	return interaction.NewInteractionServiceActionLikeArgs()
}

func newInteractionServiceActionLikeResult() interface{} {
	return interaction.NewInteractionServiceActionLikeResult()
}

func listLikeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceListLikeArgs)
	realResult := result.(*interaction.InteractionServiceListLikeResult)
	success, err := handler.(interaction.InteractionService).ListLike(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceListLikeArgs() interface{} {
	return interaction.NewInteractionServiceListLikeArgs()
}

func newInteractionServiceListLikeResult() interface{} {
	return interaction.NewInteractionServiceListLikeResult()
}

func publishCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServicePublishCommentArgs)
	realResult := result.(*interaction.InteractionServicePublishCommentResult)
	success, err := handler.(interaction.InteractionService).PublishComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServicePublishCommentArgs() interface{} {
	return interaction.NewInteractionServicePublishCommentArgs()
}

func newInteractionServicePublishCommentResult() interface{} {
	return interaction.NewInteractionServicePublishCommentResult()
}

func listCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceListCommentArgs)
	realResult := result.(*interaction.InteractionServiceListCommentResult)
	success, err := handler.(interaction.InteractionService).ListComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceListCommentArgs() interface{} {
	return interaction.NewInteractionServiceListCommentArgs()
}

func newInteractionServiceListCommentResult() interface{} {
	return interaction.NewInteractionServiceListCommentResult()
}

func deleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceDeleteArgs)
	realResult := result.(*interaction.InteractionServiceDeleteResult)
	success, err := handler.(interaction.InteractionService).Delete(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceDeleteArgs() interface{} {
	return interaction.NewInteractionServiceDeleteArgs()
}

func newInteractionServiceDeleteResult() interface{} {
	return interaction.NewInteractionServiceDeleteResult()
}

func getVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceGetVideoInfoArgs)
	realResult := result.(*interaction.InteractionServiceGetVideoInfoResult)
	success, err := handler.(interaction.InteractionService).GetVideoInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceGetVideoInfoArgs() interface{} {
	return interaction.NewInteractionServiceGetVideoInfoArgs()
}

func newInteractionServiceGetVideoInfoResult() interface{} {
	return interaction.NewInteractionServiceGetVideoInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ActionLike(ctx context.Context, req *interaction.ActionLikeReq) (r *interaction.ActionLikeResp, err error) {
	var _args interaction.InteractionServiceActionLikeArgs
	_args.Req = req
	var _result interaction.InteractionServiceActionLikeResult
	if err = p.c.Call(ctx, "ActionLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListLike(ctx context.Context, req *interaction.ListLikeReq) (r *interaction.ListLikeResp, err error) {
	var _args interaction.InteractionServiceListLikeArgs
	_args.Req = req
	var _result interaction.InteractionServiceListLikeResult
	if err = p.c.Call(ctx, "ListLike", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishComment(ctx context.Context, req *interaction.PublishCommentReq) (r *interaction.PublishCommentResp, err error) {
	var _args interaction.InteractionServicePublishCommentArgs
	_args.Req = req
	var _result interaction.InteractionServicePublishCommentResult
	if err = p.c.Call(ctx, "PublishComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListComment(ctx context.Context, req *interaction.ListCommentReq) (r *interaction.ListCommentResp, err error) {
	var _args interaction.InteractionServiceListCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceListCommentResult
	if err = p.c.Call(ctx, "ListComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Delete(ctx context.Context, req *interaction.DeleteReq) (r *interaction.DeleteResp, err error) {
	var _args interaction.InteractionServiceDeleteArgs
	_args.Req = req
	var _result interaction.InteractionServiceDeleteResult
	if err = p.c.Call(ctx, "Delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoInfo(ctx context.Context, req *interaction.GetVideoInfoRequest) (r *interaction.GetVideoInfoResponse, err error) {
	var _args interaction.InteractionServiceGetVideoInfoArgs
	_args.Req = req
	var _result interaction.InteractionServiceGetVideoInfoResult
	if err = p.c.Call(ctx, "GetVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Kitex v0.9.1. DO NOT EDIT.

package pictureservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	picture "tiktok/kitex_gen/picture"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Insert": kitex.NewMethodInfo(
		insertHandler,
		newPictureServiceInsertArgs,
		newPictureServiceInsertResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchByImage": kitex.NewMethodInfo(
		searchByImageHandler,
		newPictureServiceSearchByImageArgs,
		newPictureServiceSearchByImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	pictureServiceServiceInfo                = NewServiceInfo()
	pictureServiceServiceInfoForClient       = NewServiceInfoForClient()
	pictureServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return pictureServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return pictureServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return pictureServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PictureService"
	handlerType := (*picture.PictureService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "picture",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func insertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*picture.PictureServiceInsertArgs)
	realResult := result.(*picture.PictureServiceInsertResult)
	success, err := handler.(picture.PictureService).Insert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPictureServiceInsertArgs() interface{} {
	return picture.NewPictureServiceInsertArgs()
}

func newPictureServiceInsertResult() interface{} {
	return picture.NewPictureServiceInsertResult()
}

func searchByImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*picture.PictureServiceSearchByImageArgs)
	realResult := result.(*picture.PictureServiceSearchByImageResult)
	success, err := handler.(picture.PictureService).SearchByImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPictureServiceSearchByImageArgs() interface{} {
	return picture.NewPictureServiceSearchByImageArgs()
}

func newPictureServiceSearchByImageResult() interface{} {
	return picture.NewPictureServiceSearchByImageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Insert(ctx context.Context, req *picture.InsertRequest) (r *picture.InsertResponse, err error) {
	var _args picture.PictureServiceInsertArgs
	_args.Req = req
	var _result picture.PictureServiceInsertResult
	if err = p.c.Call(ctx, "Insert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchByImage(ctx context.Context, req *picture.SearchByImageRequest) (r *picture.SearchResponse, err error) {
	var _args picture.PictureServiceSearchByImageArgs
	_args.Req = req
	var _result picture.PictureServiceSearchByImageResult
	if err = p.c.Call(ctx, "SearchByImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

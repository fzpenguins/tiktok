// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.5
// source: idl/picture.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PictureConServiceClient is the client API for PictureConService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PictureConServiceClient interface {
	GetImageVector(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*VectorResponse, error)
}

type pictureConServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPictureConServiceClient(cc grpc.ClientConnInterface) PictureConServiceClient {
	return &pictureConServiceClient{cc}
}

func (c *pictureConServiceClient) GetImageVector(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*VectorResponse, error) {
	out := new(VectorResponse)
	err := c.cc.Invoke(ctx, "/picturetovector.PictureConService/GetImageVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PictureConServiceServer is the server API for PictureConService service.
// All implementations must embed UnimplementedPictureConServiceServer
// for forward compatibility
type PictureConServiceServer interface {
	GetImageVector(context.Context, *ImageRequest) (*VectorResponse, error)
	mustEmbedUnimplementedPictureConServiceServer()
}

// UnimplementedPictureConServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPictureConServiceServer struct {
}

func (UnimplementedPictureConServiceServer) GetImageVector(context.Context, *ImageRequest) (*VectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageVector not implemented")
}
func (UnimplementedPictureConServiceServer) mustEmbedUnimplementedPictureConServiceServer() {}

// UnsafePictureConServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PictureConServiceServer will
// result in compilation errors.
type UnsafePictureConServiceServer interface {
	mustEmbedUnimplementedPictureConServiceServer()
}

func RegisterPictureConServiceServer(s grpc.ServiceRegistrar, srv PictureConServiceServer) {
	s.RegisterService(&PictureConService_ServiceDesc, srv)
}

func _PictureConService_GetImageVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PictureConServiceServer).GetImageVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/picturetovector.PictureConService/GetImageVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PictureConServiceServer).GetImageVector(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PictureConService_ServiceDesc is the grpc.ServiceDesc for PictureConService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PictureConService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "picturetovector.PictureConService",
	HandlerType: (*PictureConServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImageVector",
			Handler:    _PictureConService_GetImageVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/picture.proto",
}
